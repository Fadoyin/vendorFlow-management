version: '3.8'

services:
  # Redis
  redis:
    image: redis:7-alpine
    container_name: vendorflow-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - vendor-network

  # Backend API (NestJS)
  backend:
    build:
      context: ./apps/backend
      dockerfile: Dockerfile
    container_name: vendorflow-backend
    restart: unless-stopped
    ports:
      - "3004:3001"
    env_file:
      - .env
    environment:
      NODE_ENV: production
      PORT: 3001
      REDIS_URL: redis://redis:6379
    depends_on:
      - redis
    networks:
      - vendor-network

  # ML Service (FastAPI)
  ml-service:
    build:
      context: ./apps/ml-service
      dockerfile: Dockerfile
    container_name: vendorflow-ml
    restart: unless-stopped
    ports:
      - "8002:8000"
    env_file:
      - .env
    environment:
      REDIS_URL: redis://redis:6379
    depends_on:
      - redis
    networks:
      - vendor-network

  # Frontend (Next.js)
  frontend:
    build:
      context: ./apps/frontend
      dockerfile: Dockerfile
    container_name: vendorflow-frontend
    restart: unless-stopped
    ports:
      - "3005:3005"
    env_file:
      - .env
    environment:
      NODE_ENV: production
      NEXT_INTERNAL_API_URL: http://backend:3001
    depends_on:
      - backend
    networks:
      - vendor-network

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: vendorflow-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
      - ml-service
    networks:
      - vendor-network

volumes:
  redis_data:

networks:
  vendor-network:
    driver: bridge 