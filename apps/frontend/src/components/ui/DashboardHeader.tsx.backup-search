'use client'

import { useState, useRef, useEffect } from 'react'
import { useRouter } from 'next/navigation'
import Link from 'next/link'
import { getUserFromStorage } from '@/lib/auth-utils'
import { searchApi } from "@/lib/api"

interface DashboardHeaderProps {
  onMenuClick?: () => void
}

export function DashboardHeader({ onMenuClick }: DashboardHeaderProps) {
  const [isDropdownOpen, setIsDropdownOpen] = useState(false)

  const [user, setUser] = useState<any>(null)
  
  const dropdownRef = useRef<HTMLDivElement>(null)
  const router = useRouter()
  const router = useRouter()

  // Get current user after hydration to prevent SSR mismatch
  useEffect(() => {
    const currentUser = getUserFromStorage()
    setUser(currentUser)
  }, [])

  // Close dropdown when clicking outside
  useEffect(() => {
    function handleClickOutside(event: MouseEvent) {
      if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {
        setIsDropdownOpen(false)
      }
    }

    document.addEventListener('mousedown', handleClickOutside)
    return () => {
      document.removeEventListener('mousedown', handleClickOutside)
    }
  }, [])

  // Search keyboard shortcuts
  useEffect(() => {
    const handleKeyDown = (e: KeyboardEvent) => {
      if ((e.ctrlKey || e.metaKey) && e.key === 'k') {
        e.preventDefault()
        searchRef.current?.focus()
        setIsSearchFocused(true)
      }
      if (e.key === 'Escape' && isSearchFocused) {
        searchRef.current?.blur()
        setIsSearchFocused(false)
        setSearchQuery('')
      }
    }

    document.addEventListener('keydown', handleKeyDown)
    return () => document.removeEventListener('keydown', handleKeyDown)
  }, [isSearchFocused])

  const handleSearch = (e: React.FormEvent) => {
    e.preventDefault()
    if (searchQuery.trim()) {
      router.push(`/dashboard/search?q=${encodeURIComponent(searchQuery.trim())}`)
      console.log("Navigating to search results for:", searchQuery)
    }
  }

  const handleLogout = () => {
    setIsDropdownOpen(false)
    localStorage.removeItem('authToken')
    localStorage.removeItem('user')
    localStorage.removeItem('access_token')
    localStorage.removeItem('tokenExpiry')
    router.push('/login')
  }

  const getInitials = (name: string) => {
    return name
      .split(' ')
      .map(n => n[0])
      .join('')
      .toUpperCase()
      .slice(0, 2)
  }

  const getUserDisplayName = () => {
    if (user?.firstName && user?.lastName) {
      return `${user.firstName} ${user.lastName}`
    }
    if (user?.email) {
      return user.email.split('@')[0]
    }
    return 'User'
  }

  const quickActions = [
    { name: 'New Order', href: '/dashboard/orders', icon: '📄' },
    { name: 'Add Inventory', href: '/dashboard/inventory', icon: '📦' },
  ]

  return (
    <header className="bg-white border-b border-gray-200 fixed top-0 left-0 right-0 z-50 backdrop-blur-sm bg-white/95">
      <div className="flex items-center justify-between h-16 px-4 sm:px-6 lg:px-8">
        
        {/* Left Section */}
        <div className="flex items-center space-x-4">
          {/* Mobile menu button */}
          <button
            onClick={onMenuClick}
            className="lg:hidden p-2 rounded-xl text-gray-500 hover:text-gray-700 hover:bg-gray-100 transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-revtrack-primary focus:ring-offset-2"
          >
            <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 6h16M4 12h16M4 18h16" />
            </svg>
          </button>
          
          {/* Logo */}
          <Link href="/dashboard" className="flex items-center space-x-3">
            <div className="relative">
                              <div className="w-10 h-10 bg-gradient-to-br from-revtrack-primary to-revtrack-secondary rounded-xl flex items-center justify-center shadow-lg hover:shadow-xl transition-all duration-200 hover:scale-105">
                <svg className="w-6 h-6 text-white" fill="currentColor" viewBox="0 0 20 20">
                  <path fillRule="evenodd" d="M3 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z" clipRule="evenodd" />
                </svg>
              </div>
            </div>
                         <span className="hidden sm:block text-xl font-bold text-gray-900 hover:text-revtrack-primary transition-colors duration-200">
              VendorFlow
            </span>
          </Link>
        </div>

        {/* Center Section - Search */}
        <div className="hidden md:flex flex-1 max-w-2xl mx-8">
          <form onSubmit={handleSearch} className="w-full">
            <div className="relative">
              <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                <svg className={`h-5 w-5 transition-colors duration-200 ${isSearchFocused ? 'text-revtrack-primary' : 'text-gray-400'}`} fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                </svg>
              </div>
              <input
                ref={searchRef}
                type="text"
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                onFocus={() => setIsSearchFocused(true)}
                onBlur={() => setIsSearchFocused(false)}
                className={`block w-full pl-10 pr-16 py-3 border rounded-xl bg-gray-50 text-gray-900 placeholder-gray-500 transition-all duration-200 focus:outline-none focus:ring-2 focus:bg-white ${
                  isSearchFocused 
                    ? 'border-revtrack-primary focus:ring-revtrack-primary shadow-lg' 
                    : 'border-gray-200 hover:border-gray-300 hover:bg-white'
                }`}
                placeholder="Search orders, inventory, vendors... (⌘K)"
              />
              <div className="absolute inset-y-0 right-0 pr-3 flex items-center">
                <kbd className="hidden sm:inline-flex items-center px-2 py-1 border border-gray-200 rounded text-xs font-mono text-gray-500 bg-white">
                  ⌘K
                </kbd>
              </div>
            </div>
          </form>
        </div>

        {/* Right Section */}
        <div className="flex items-center space-x-3">
          
          {/* Quick Actions - Desktop Only */}
          <div className="hidden xl:flex items-center space-x-2">
            {quickActions.map((action) => (
              <Link
                key={action.name}
                href={action.href}
                className="flex items-center space-x-2 px-3 py-2 rounded-lg text-sm font-medium text-gray-700 hover:text-revtrack-primary hover:bg-revtrack-background transition-all duration-200"
                title={action.name}
              >
                <span className="text-lg">{action.icon}</span>
                <span className="hidden 2xl:block">{action.name}</span>
              </Link>
            ))}
          </div>


          {/* Mobile Search Button */}
          <button
            onClick={() => searchRef.current?.focus()}
            className="md:hidden p-2 rounded-xl text-gray-500 hover:text-gray-700 hover:bg-gray-100 transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-revtrack-primary focus:ring-offset-2"
          >
            <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
            </svg>
          </button>

          {/* User Profile Dropdown */}
          <div className="relative" ref={dropdownRef}>
            <button
              onClick={() => setIsDropdownOpen(!isDropdownOpen)}
              className="flex items-center space-x-3 p-2 rounded-xl hover:bg-gray-100 transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-revtrack-primary focus:ring-offset-2"
            >
              <div className="relative">
                                 <div className="w-8 h-8 bg-gradient-to-br from-revtrack-primary to-revtrack-secondary rounded-lg flex items-center justify-center text-white text-sm font-semibold shadow-lg hover:shadow-xl transition-all duration-200">
                  {user ? getInitials(getUserDisplayName()) : 'U'}
                </div>
                <div className="absolute -bottom-1 -right-1 w-3 h-3 bg-green-500 border-2 border-white rounded-full"></div>
              </div>
              <div className="hidden sm:block text-left">
                <div className="text-sm font-semibold text-gray-900">{getUserDisplayName()}</div>
                <div className="text-xs text-gray-500 capitalize">{user?.role || 'User'}</div>
              </div>
              <svg className={`w-4 h-4 text-gray-400 transition-transform duration-200 ${isDropdownOpen ? 'rotate-180' : ''}`} fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
              </svg>
            </button>

            {/* Dropdown Menu */}
            {isDropdownOpen && (
              <div className="absolute right-0 mt-2 w-64 bg-white rounded-2xl shadow-2xl py-2 z-50 border border-gray-100 animate-in slide-in-from-top-5 duration-200">
                
                {/* User Info */}
                <div className="px-4 py-3 border-b border-gray-100">
                  <div className="flex items-center space-x-3">
                    <div className="w-10 h-10 bg-gradient-to-br from-revtrack-primary to-revtrack-secondary rounded-xl flex items-center justify-center text-white font-semibold">
                      {user ? getInitials(getUserDisplayName()) : 'U'}
                    </div>
                    <div>
                      <div className="font-semibold text-gray-900">{getUserDisplayName()}</div>
                      <div className="text-sm text-gray-500">{user?.email}</div>
                      <div className="text-xs text-revtrack-primary capitalize font-medium">{user?.role || 'User'}</div>
                    </div>
                  </div>
                </div>

                {/* Quick Stats */}
                <div className="px-4 py-3 border-b border-gray-100">
                  <div className="grid grid-cols-2 gap-4 text-center">
                    <div>
                      <div className="text-lg font-bold text-gray-900">24</div>
                      <div className="text-xs text-gray-500">Active Orders</div>
                    </div>
                    <div>
                      <div className="text-lg font-bold text-gray-900">$12.5k</div>
                      <div className="text-xs text-gray-500">This Month</div>
                    </div>
                  </div>
                </div>

                {/* Navigation Items */}
                <div className="py-2">
                  {[
                    { name: 'Profile Settings', href: '/dashboard/vendor/profile', icon: '👤' },
                    { name: 'Account Settings', href: '/dashboard/settings', icon: '⚙️' },
                    { name: 'Billing & Plans', href: '/dashboard/vendor/payments', icon: '💳' },
                    { name: 'Notifications', href: '/dashboard/settings/notifications', icon: '🔔' },
                    { name: 'Help & Support', href: '#', icon: '❓' },
                  ].map((item) => (
                    <button
                      key={item.name}
                      onClick={() => {
                        setIsDropdownOpen(false)
                        if (item.href !== '#') router.push(item.href)
                      }}
                      className="flex items-center w-full px-4 py-3 text-sm text-gray-700 hover:bg-gray-50 hover:text-revtrack-primary transition-all duration-200"
                    >
                      <span className="text-lg mr-3 hover-scale-sm transition-transform duration-200">{item.icon}</span>
                      {item.name}
                    </button>
                  ))}
                </div>

                <div className="border-t border-gray-100 pt-2">
                  <button
                    onClick={handleLogout}
                    className="flex items-center w-full px-4 py-3 text-sm text-red-600 hover:bg-red-50 transition-all duration-200"
                  >
                    <svg className="w-5 h-5 mr-3 hover-scale-sm transition-transform duration-200" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1" />
                    </svg>
                    Sign Out
                  </button>
                </div>
              </div>
            )}
          </div>
        </div>
      </div>

      {/* Mobile Search Bar */}
      {isSearchFocused && (
        <div className="md:hidden border-t border-gray-200 p-4">
          <form onSubmit={handleSearch}>
            <div className="relative">
              <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                <svg className="h-5 w-5 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                </svg>
              </div>
              <input
                type="text"
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                className="block w-full pl-10 pr-3 py-3 border border-gray-200 rounded-xl bg-white text-gray-900 placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-revtrack-primary focus:border-revtrack-primary"
                placeholder="Search anything..."
                autoFocus
              />
            </div>
          </form>
        </div>
      )}
    </header>
  )
} 